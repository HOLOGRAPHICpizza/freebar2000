package org.peak15.freebar2000.ui;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.OutlineView;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.peak15.freebar2000.nodes.MusicNode;
import org.peak15.freebar2000.types.Music;

@ConvertAsProperties(dtd = "-//org.peak15.freebar2000.ui//PlaylistTopComponent//EN", autostore = false)
@TopComponent.Description(
        preferredID = "PlaylistTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
public class PlaylistTopComponent extends TopComponent implements ExplorerManager.Provider {
    private static int count = 0;
	private static PlaylistTopComponent last = null;
    
	/**
	 * Data model for the playlist.
	 */
	private final Music playlist;
	
	private final MusicNode root;
	private final ExplorerManager mgr = new ExplorerManager();
	private final OutlineView outlineView = new OutlineView("Title");
	
    /**
     * Creates new form PlaylistTopComponent
     */
    public PlaylistTopComponent() {
        initComponents();
        
        String name = NbBundle.getMessage(
                PlaylistTopComponent.class,
                "NewPlaylistNameFormat", count++);
        setDisplayName(name);
        setName(name);
		
		outlineView.getOutline().setRootVisible(false);
		setLayout(new BorderLayout());
		add(outlineView, BorderLayout.CENTER);
		
		playlist = new Music(name, new ArrayList<Music>());
		root = MusicNode.makeNode(playlist);
		mgr.setRootContext(root);
    }
	
	public void addMusic(Music music) {
		extractSongs(music, playlist.getList());
		root.refresh();
	}
	
	private static void extractSongs(Music music, List<Music> toPopulate) {
		if(music.getType() == Music.Type.SONG) {
			toPopulate.add(music);
		}
		else {
			for(Music m : music.getList()) {
				extractSongs(m, toPopulate);
			}
		}
	}

	@Override
	protected void componentShowing() {
		super.componentShowing();
		last = this;
	}
	
	@Override
	public ExplorerManager getExplorerManager() {
		return mgr;
	}
	
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void writeProperties(Properties p) {
        //
    }
    
    private void readProperties(Properties p) {
        //
    }
	
	/**
	 * @return last focused instance, or null if none
	 */
	public static PlaylistTopComponent getFocusedInstance() {
		return last;
	}
}
