/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.peak15.freebar2000.ui;

import java.io.IOException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.cookies.SaveCookie;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.peak15.freebar2000.ui//Playlist//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "PlaylistTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "File", id = "org.peak15.freebar2000.ui.PlaylistTopComponent")
@ActionReference(path = "Menu/File" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_NewPlaylistAction",
preferredID = "PlaylistTopComponent")
@Messages({
    "CTL_PlaylistAction=Playlist",
    "CTL_PlaylistTopComponent=Playlist Window",
    "HINT_PlaylistTopComponent=This is a Playlist window"
})
public final class PlaylistTopComponent extends TopComponent {
    
    /**
     * The bag of stuff we add/remove the Saver from, and store the last-used file in
     */
    private InstanceContent content = new InstanceContent();
    
    private Saver saver = new Saver();

    public PlaylistTopComponent() {
        initComponents();
        setName(Bundle.CTL_PlaylistTopComponent());
        setToolTipText(Bundle.HINT_PlaylistTopComponent());
        
        // Connect our lookup to the rest of the system, so that
        // SaveAction will pay attention to whether or not the Saver is available
        associateLookup(new AbstractLookup(content));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PlaylistTopComponent.class, "PlaylistTopComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(318, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(275, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private class Saver implements SaveCookie {

        @Override
        public void save() throws IOException {
            System.out.println("blarg");
        }
    }
}
